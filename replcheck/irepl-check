#! /usr/bin/env python

from icommand import IrodsCommand, isrel, guess_icwd, guess_user
from replicas import iquest_replicas, mciaRGList, file_replicas

def replicas_failed_filter(replicas, filter_):
    "filter replica statuses that fail conditions"

    def _failed_filter(e):
        return not filter_(e[1])

    failed = filter(_failed_filter, replicas.items())

    return failed

_irepl = IrodsCommand("irepl")
_irm = IrodsCommand("irm", ["-f"])

def repair_replicas_number(path, min_ = None, max_ = None, rg_list = None, verbose = False):
    "issues actions to fix replica numbers according to min_/max_ target"

    rg_list = rg_list or mciaRGList()

    file_repls = file_replicas(path)
    file_rgs = map(lambda e: e[0], file_repls)

    nrepl = len(file_rgs)

    if verbose:
        print "repair", path, "replicas:", ["#%s (%s)" % (x[1], x[0]) for x in file_repls], "available:", rg_list

    if nrepl < min_:
        # compute where to put new replicas according to rg_list priority order
        possible_rgs = [x for x in rg_list if x not in file_rgs]

        if not possible_rgs: print "WARNING: cannot add replicas for \"%s\" because not engough online RGs" % path

        for i in range(max(0, min_ - nrepl)):
            print path, ": add replica (%s)" % possible_rgs[i]
            retcode, output = _irepl(["-R", possible_rgs[i], path])
            if retcode != 0:
                print "ERROR:", output

    if nrepl > max_:

        # compute priority list of replicas to remove (rg_list reverse order)
        remove_rgs = [x for x in rg_list if x in file_rgs]
        remove_rgs.reverse()

        for i in range(max(0, nrepl - max_)):
            if i > len(remove_rgs):
                print "WARNING: \"%s\" cannot remove %dith replica because RG not online" % (path, i)
            else:
                rg_index = file_rgs.index(remove_rgs[i])
                rg, repl_id = file_repls[rg_index]
                print path, ": remove replica #%s (%s)" % (repl_id, rg)
                retcode, output = _irm(["-n", repl_id, path])
                if retcode != 0:
                    print "ERROR:", output

if __name__ == "__main__":
    import sys
    import os.path

    from optparse import OptionParser

    usage="""\
usage: %prog [options] [--] <e>|<m>:|:<M>|<m>:<M>

checks wether files respect replica number condition and prints files which fail the test.

There are 4 types of possible conditions:
<e> exact number of replicas 
<m>: minimum number of replicas
:<M> maximum number of replicas
<m>:<M> range of number of replicas (between <m> and <M>)

Examples:

# check files with 3 replicas or more
$ %prog 3:

# check files with exactly 2 replicas
$ %prog 2
"""

    parser = OptionParser(usage = usage)
    parser.add_option("-c", "--collection", dest="collection", default='.',
                      help="check files in COLL (default: .)", metavar="COLL")
    parser.add_option("-r", "--recursive",
                      action="store_true", dest="recursive", default=False,
                      help="check files in subcollections")
    parser.add_option("--repair",
                      action="store_true", dest="repair", default=False,
                      help="try to repair replicas numbers according to specifications")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="be verbose")
    parser.add_option("-G", "--resource-group", dest="resource_group", default=None,
                      metavar="RESOURCE_GROUP",
                      help="check replica numbers only for replicas in RESOURCE_GROUP")

    (options, args) = parser.parse_args()

    condition = None
    min_ = None
    max_ = None

    for arg in args:
        if arg.endswith(':'):
            replnum = int (arg[:-1])
            condition = lambda e: e >= replnum
            min_ = replnum
        elif arg.startswith(':'):
            replnum = int (arg[1:])
            condition = lambda e: e <= replnum
            max_ = replnum
        elif ':' in arg:
            m, M = map(int, arg.split(':'))
            condition = lambda e: e>=m and e<=M
            min_ = m
            max_ = M
        else:
            replnum = int (arg)
            condition = lambda e: e == replnum
            min_ = replnum
            max_ = replnum

    if not condition: sys.exit(0)

    collection = options.collection

    if isrel(collection):
        icwd = guess_icwd()
        collection = os.path.normpath(icwd + '/' + collection)

    if options.verbose:
        print "Check collection:", collection
        if options.recursive:
            print "Recursive check"

    

    replicas = iquest_replicas(collection, user = guess_user(),
                               recursive = options.recursive)

    if options.resource_group:
        group_replicas = iquest_replicas(collection, user = guess_user(),
                                         recursive = options.recursive,
                                         resource_group = options.resource_group)

        # zero all files replica numbers
        for k in replicas: replicas[k] = 0

        # replace replica numbers by resource group replica numbers
        for k, v in group_replicas.iteritems(): replicas[k] = v

    failed = replicas_failed_filter(replicas, condition)

    if options.verbose:
        if failed: print "\n".join(["Failed: \"%s\" has %d replicas" % ff for f in failed])
        else: print "no file failed the check"
    else:
        if failed: print "\n".join(["%s: %s" % f for f in failed])

    if options.repair and failed:
        if options.verbose: print "Begin repair"
        if max_ <= 0:
            print "WARNING: cannot repair with maximum replica number below 1"
        rg_list = mciaRGList()
        for f in failed:
            repair_replicas_number(f[0], min_, max_, rg_list, verbose = options.verbose)
