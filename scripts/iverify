#! /usr/bin/env python

import sys
import re
import time

from mcia_irods_utils import DirectOutputIrodsCommand, IrodsCommand, iargw, isrel, guess_icwd

# separate iquest row fields with a very unlikely character
_field_separator = '\8' # backspace

def _iquest_fmt( fields ):
    return  _field_separator.join( ["%s" for _x in fields] )

class _iquest_row_filter:
  def __init__( self, fields ):
      self.fields = fields

  def __call__( self, row ):
    if "CAT_NO_ROWS_FOUND" in row: return None

    cols = row.rstrip().split( _field_separator )
    ret = {}

    for i, f in enumerate( cols ):
        try:
          ret[self.fields[i]] = f
        except IndexError, e:
          sys.stderr.write( "iquest_recursive_collection failed with exception: file=%s index=%s\n" % ( f, i ) + e )
    return ret

def iquest_recursive_collection( path, fields, conditions = [] ):

    fmt = _iquest_fmt( fields )

    iquest = DirectOutputIrodsCommand( "iquest", ["--no-page", fmt],
                          output_filter = _iquest_row_filter( fields ), verbose = False )

    select = "select " + ",".join( fields )

    where_clause = "where " + " and ".join( ["COLL_NAME = '%s'" % path] + conditions )

    output = iquest( [' '.join ( [select, where_clause] )] )
    for l in output:
        if l is None: continue
        yield l

    where_clause = "where " + " and ".join( ["COLL_NAME like '%s/%%'" % path] + conditions )

    output = iquest( [' '.join ( [select, where_clause] )] )
    for l in output:
        if l is None: continue
        yield l

def data_repls( path, conditions ):

    file_fields = [
      "COLL_NAME",
      "DATA_NAME",
      "DATA_REPL_NUM",
      "DATA_CHECKSUM",
      "DATA_PATH",
      "RESC_LOC",
      "DATA_ID",
    ]

    return file_fields, iquest_recursive_collection( path, file_fields, conditions )

_file_chksum_cmd = IrodsCommand( "iquest", ["--no-page", "%s"], verbose = True )

_ichksum_cmd = IrodsCommand( "ichksum", ["-f"], verbose = False )
def ichksum( r, verbose ):
    repl = r["DATA_REPL_NUM"]
    path = r["path"]

    if verbose:
        print "irods check:", path, repl

    retcode, output = _ichksum_cmd( [path, "-n", repl] )
    if retcode != 0:
        sys.stderr.write( " ".join( [path, repl, str( retcode ), output] ) + "\n" )

    return retcode

_local_ichksum_cmd = IrodsCommand( "md5sum", verbose = False )
def local_ichksum( r, verbose ):
    repl = r["DATA_REPL_NUM"]
    path = r["path"]
    data_path = r["DATA_PATH"]

    if verbose:
        print "local check:", path, data_path

    retcode, output = _local_ichksum_cmd( [data_path] )
    if retcode != 0:
        if not os.path.isfile( data_path ):
            # double check catalog in case replica has changed in the meantime
            retcode, new_path = _file_chksum_cmd( ["select DATA_PATH where DATA_ID = '%s' AND RESC_LOC = '%s' AND DATA_REPL_NUM = '%s'" % ( r["DATA_ID"], r["RESC_LOC"], r["DATA_REPL_NUM"], )] )
            if new_path != data_path:
                # replica has changed path, skip silently
                return 0

        sys.stderr.write( " ".join( [path, repl, str( retcode ), output] ) )
        return retcode

    md5sum, _localpath = output.split( " ", 1 )

    # md5sum has a weird behaviour with filenames containing backslashes: it prefixes its output with a backslash too!
    # swallow it if present
    if md5sum.startswith( '\\' ): md5sum = md5sum[1:]

    if md5sum != r["DATA_CHECKSUM"]:
        # double check catalog checksum since it may have changed in the meantime
        retcode, new_md5sum = _file_chksum_cmd( ["select DATA_CHECKSUM where DATA_ID = '%s' AND DATA_REPL_NUM = '%s'" % ( r["DATA_ID"], r["DATA_REPL_NUM"], )] )
        if new_md5sum != md5sum:
            sys.stderr.write( " ".join( [path, repl, "local checksum failed:", md5sum,
                                         "(should be %s)" % r["DATA_CHECKSUM"]] ) + "\n" )
        return 255
    return 0

if __name__ == "__main__":
    import os.path

    from optparse import OptionParser

    usage = """\
usage: %prog [options] COLLECTION...


"""

    parser = OptionParser( usage = usage )
    parser.add_option( "-u", "--user", dest = "user", default = None,
                       help = "only for user" )

    parser.add_option( "-R", "--resource", dest = "resource", default = None,
                       help = "only for resource" )

    parser.add_option( "-H", "--resource-host", dest = "resource_host", default = None,
                       help = "check files on resource host" )

    parser.add_option( "--no-irods-check", dest = "irods_check", default = True,
                       action = "store_false",
                       help = "don't verify checksums with ichksum " )

    parser.add_option( "-l", "--local-check", dest = "local_check", default = False,
                       action = "store_true",
                       help = "checksums are to be verified locally (with md5sum)" )

    parser.add_option( "-v", "--verbose", dest = "verbose", default = False,
                       action = "store_true",
                       help = "verbose output" )

    parser.add_option( "--ignore", metavar = "REGEXP",
                      dest = "ignore", default = [], action = "append",
                      help = "ignore files satifying REGEXP (option can be called multiple times)" )

    parser.add_option( "--older-days", metavar = "DAYS",
                      type = "int", dest = "older", default = None,
                      help = "consider only replicas older than DAYS days" )

    parser.add_option( "--newer-days", metavar = "DAYS",
                      type = "int", dest = "newer", default = None,
                      help = "consider only replicas newer than DAYS days" )

    ( options, args ) = parser.parse_args()

    if not args:
        args = ["."]

    conditions = []
    if options.user is not None:
        conditions.append( "DATA_OWNER_NAME = '%s'" % options.user )

    if options.resource is not None:
        conditions.append( "DATA_RESC_NAME = '%s'" % options.resource )

    older_date = None
    if options.older:
        older_date = time.time() - options.older * 24 * 3600.
        conditions.append( "DATA_MODIFY_TIME < '0%s'" % int( older_date ) )
        if options.verbose:
            print "Check replicas older than: %d days (date=%s)" % ( options.older, older_date )

    newer_date = None
    if options.newer:
        newer_date = time.time() - options.newer * 24 * 3600.
        conditions.append( "DATA_MODIFY_TIME > '0%s'" % int( newer_date ) )
        if options.verbose:
            print "Check replicas newer than: %d days (date=%s)" % ( options.newer, newer_date )

    icwd = guess_icwd()

    collections = iargw( args, icwd )

    if options.resource_host is not None:
        conditions.append( "RESC_LOC = '%s'" % options.resource_host )

    ignore_regexps = []
    for regexp in options.ignore:
        ignore_regexps.append( re.compile( regexp ) )

    for collection in collections:

        # iquest doesn't support relative paths
        if isrel( collection ):
            collection = os.path.normpath( icwd + '/' + collection )

        fields, ret = data_repls( collection, conditions )

        for r in ret:
            directory = r["COLL_NAME"]
            filename = r["DATA_NAME"]
            path = os.path.join( directory, filename )
            r["path"] = path


            proceed = True
            for regexp in ignore_regexps:
                if regexp.match( path ):
                    if options.verbose:
                        print "ignoring replica:", path, r["DATA_REPL_NUM"]
                    proceed = False
                    break
            if not proceed: continue

            if options.local_check:
                try:
                    local_ichksum( r, options.verbose )
                except Exception, e:
                    sys.stderr.write( "Local checksum failed with exception:\n%s" % e )
            if options.irods_check:
                try:
                    ichksum( r, options.verbose )
                except Exception, e:
                    sys.stderr.write( "iRODS checksum failed with exception:\n%s" % e )
