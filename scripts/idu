#! /usr/bin/env python3

import sys

from mcia_irods_utils import IrodsCommand, iargw, isrel, guess_icwd
from mcia_irods_utils import iquest_iscollection
from mcia_irods_utils import units

def iquest_du_base(path):
    "gather collection disk usage stats"

    def iquest_filter(e):
        if "CAT_NO_ROWS_FOUND" in e: return {}

        colls = e.strip().split('\n')

        ret = {}
        for c in colls:
            size, name = c.split(':', 1)
            ret[name] = int(size)

        return ret

    iquest = IrodsCommand("iquest", ["--no-page", "no-distinct"],
                          output_filter = iquest_filter, verbose = False)

    select = "select sum(DATA_SIZE), COLL_NAME"
    where_local = "where COLL_NAME = '%s'" % path
    where_recursive = "where COLL_NAME like '%s/%%'" % path

    retcode, local_base = iquest(["%s:%s", ' '.join ([select, where_local])])
    if retcode != 0:
        print('ERROR:', local_base)
        sys.exit(retcode)

    retcode, recursive_base = iquest(["%s:%s", ' '.join ([select, where_recursive])])
    if retcode != 0:
        print('ERROR:', recursive_base)
        sys.exit(retcode)

    local_base.update(recursive_base)

    if not local_base:
        # path may be a file
        select = "select sum(DATA_SIZE), COLL_NAME, DATA_NAME"
        where_file = "where COLL_NAME = '%s' and DATA_NAME = '%s'" % os.path.split(path)
        retcode, local_base = iquest(["%s:%s/%s", ' '.join ([select, where_file])])
        if retcode != 0:
            print('ERROR:', local_base)
            sys.exit(retcode)

    return local_base

def iquest_du_logical_base(path):
    "gather collection disk usage stats in logical file size"

    _field_separator = '\8' # backspace

    def _fmt(n):
        return _field_separator.join(["%s"] * n)

    def iquest_filter(e):
        if "CAT_NO_ROWS_FOUND" in e: return {}

        colls = e.strip().split('\n')

        ret = {}
        for c in colls:
            size, path, _name = c.split(_field_separator, 2)
            if path not in ret: ret[path] = 0
            ret[path] += int(size)

        return ret

    iquest = IrodsCommand("iquest", ["--no-page", "no-distinct"],
                           output_filter = iquest_filter, verbose = False)

    select = "select max(DATA_SIZE), COLL_NAME, DATA_NAME"
    where_local = "where COLL_NAME = '%s'" % path
    where_recursive = "where COLL_NAME like '%s/%%'" % path

    _retcode, local_base = iquest([_fmt(3), ' '.join ([select, where_local])])

    _retcode, recursive_base = iquest([_fmt(3), ' '.join ([select, where_recursive])])
    local_base.update(recursive_base)

    if not local_base:
        # path may be a file
        select = "select max(DATA_SIZE), COLL_NAME, DATA_NAME"
        where_file = "where COLL_NAME = '%s' and DATA_NAME = '%s'" % os.path.split(path)
        _retcode, local_base = iquest(["%s:%s/%s", ' '.join ([select, where_file])])

    return local_base

def _path_cmp(a, b):
    # path comparison function: replace '/' in order it takes precedence over all characters
    return cmp(a.replace('/', chr(0)), b.replace('/', chr(0)))

def _path_key(p):
    # path comparison function: replace '/' in order it takes precedence over all characters
    return p.replace('/', chr(0))

def base_include_subcollections(base):
    colls = list(base.keys())
    colls.sort(key=_path_key)

    for i, parent in enumerate(colls):
        for subcollection in colls[i+1:]:
            if not subcollection.startswith(parent + "/"): break

            base[parent] += base[subcollection]

def base_print(base, maxslashes = sys.maxsize):
    colls = list(base.keys())
    colls.sort(key=_path_key, reverse = True)

    maxsize = max([len(str(s)) for s in list(base.values())])

    fmt = "{0:<"+str(maxsize)+"} {1}"

    for coll in colls:
        if coll.count('/') <= maxslashes:
            print(fmt.format(base[coll], coll))


if __name__ == "__main__":
    import os.path

    from optparse import OptionParser

    usage="""\
usage: %prog [options] [COLLECTION]...

summary disk usage for each COLLECTION, recursively.
"""

    parser = OptionParser(usage = usage)
    parser.add_option("-S", "--separate-dirs",
                      action="store_false", dest="recursive", default=True,
                      help="do not include size of subdirectories")
    parser.add_option("-d", "--max-depth", metavar="DEPTH", default = -1,
                      action="store", dest="maxdepth", type = 'int',
                      help="print the total for a directory (or file, with --all) only if it is DEPTH or fewer levels below the command line argument;  --max-depth=0 is the same as --summarize")
    parser.add_option("-s", "--summarize", const = 0,
                      action="store_const", dest="maxdepth",
                      help="display only a total for each argument")
    parser.add_option("--logical-size",
                      action = "store_true", dest = "logical_size", default = False,
                      help = "display logical file size (i.e. don't count multiple replicas)")

    units.options_parser_add_size_units(parser)


    (options, args) = parser.parse_args()

    if not args: args = ['.']
    icwd = guess_icwd()

    collections = iargw(args, icwd)

    return_code = 0
    for collection in collections:

        # iquest doesn't support relative paths
        if isrel(collection):
            print(icwd, collection)
            collection = os.path.normpath(icwd + '/' + collection)

        base = {}
        if options.logical_size:
            base = iquest_du_logical_base(collection)
        else:
            base = iquest_du_base(collection)

        if not base:
            if not iquest_iscollection(collection):
                print("Error: \"%s\" not found" % collection)
                return_code = -1
                continue

        if collection not in base:
            # insert empty record in "base" when "collection" is empty of data objects
            base[collection] = 0

        if options.recursive:
            base_include_subcollections(base)

        units.base_convert(base, options.converter)

        maxdepth = sys.maxsize
        if options.maxdepth >= 0:
            maxdepth = collection.count('/') + options.maxdepth

        base_print(base, maxdepth)

    sys.exit(return_code)
